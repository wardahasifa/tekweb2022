1. Users

a.Menampilkan data user

GET: /users
response:
[
    {
        "id": "",
        "nama": "",
        "des": "",
        "email": "",
        "url_fb": "",
        "url_ig": "",
        "url_git": "",
        "url_twitter": "",
        "img_profile": ""
    },
    ...
]


b. Menampilkand ata user dengan ID

GET: /users/[id]
reponse:
{
      "id": "",
      "nama": "",
      "des": "",
      "email": "",
      "url_fb": "",
      "url_ig": "",
      "url_git": "",
      "url_twitter": "",
      "img_profile": ""
}


c. Menambahkan data user Secara oomatis

POST: /user
data:
{
      "nama": "",
      "des": "",
      "email": "",
      "url_fb": "",
      "url_ig": "",
      "url_git": "",
      "url_twitter": "",
      "img_profile": ""
}

response:
true    // if success
false   // if failure


d. Mengedit data user dengan ID

PUT: /user/[id]
data:
{
      "nama": "",
      "des": "",
      "email": "",
      "url_fb": "",
      "url_ig": "",
      "url_git": "",
      "url_twitter": "",
      "img_profile": ""
}

response:
true    // if success
false   // if failure



e. Menghapus data user dengan ID

DELETE: /user/[id]
response:
true    // if success
false   // if failure




2. Artikel
   
a. Menampilkan data semua artikel

GET: /artikels
response:
[
    {
        "id": "",
        "tittle": "",
        "sumber": "",
        "content": "",
        "markdown": ""
    },
    ...
]


b. Menampilkan data artikel dengan ID

GET: /artikels/[id]
response:
{
    "id": "",
    "tittle": "",
    "sumber": "",
    "content": "",
    "markdown": ""
}


c. Menambahkan artikel ke dalam database

POST: /artikel
data:
{
    "tittle": "",
    "sumber": "",
    "content": "",
    "markdown": ""
}

response:
true    // if success
false   // if failure


d. Melakukan update terhadap data artikel dengan ID

PUT: /artikel/[id]
data:
{
    "tittle": "",
    "sumber": "",
    "content": "",
    "markdown": ""
}

response:
true    // if success
false   // if failure


e. Menghapus artikel dengan ID

DELETE: /artikel/[id]
response:
true    // if success
false   // if failure



3. Portofolio

a. Menampilkan data untuk semua portofolio

GET: /pors
response:
[
    {
        "id": "",
        "sekolah": "",
        "tahun": "",
    },
    ...
]


b. Menampilkan data portofilio dengan id  tertentu

GET: /pors/[id]
response:
{
    "id": "",
    "sekolah": "",
    "tahun": "",
}


c. Menambahkan portofolio secara otomatis memasukkan id

POST: /por
data:
{      
    "sekolah": "",
    "tahun": ""
}

response:
true    // if success
false   // if failure


d. Memperbarui portofolio dengan menggunakan ID

PUT: /por/[id]
data:
{      
    "id": "",
    "sekolah": "",
    "tahun": "",
}

response:
true    // if success
false   // if failure


e. Menghapus data portofolio dengan ID

DELETE: /por/[id]
response:
true    // if success
false   // if failure



4. Desain Database
Desain database dari API Point yang telah saya buat adalah sebagai berikut:

mermaid
classDiagram
    class User{
        # id: int
        + nama: string
        + des: string
        + email: string
        + url_fb: string
        + url_ig: string
        + url_git: string
        + url_tw: string
        + img_profile: string
        + foto: string
        + getAllUser()
        + getUserById()
        + updateUser()
        + createUser()
        + deleteUser()
    },
    class Portofolio{
        # id: int
        + sekolah: string
        + tahun: string
        + getAllPortofolio()
        + getPortofolioById()
        + updatePortofolio()
        + createPortofolio()
        + deletePortofolio()
    },
    class Artikel{
        # id: int
        + tittle: string
        + sumber: string
        + content: string
        + markdown: string
        + getAllArtikel()
        + getArtikelById()
        + updateArtikel()
        + createArtikel()
        + deleteArtikel()
    }
